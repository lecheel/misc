#! /bin/bash
export TOP=`pwd`
export ledir=$HOME/ledir
export lefiles=$HOME/lefiles
mkdir -p "$HOME/proj"
G_leproj="$HOME/proj/leproj"

#
#  1. sp --anp proj
#  2. sp    
#  3.  h s   : set current directory as proj
#  4.  h     : go home directory
#


# change to sp option
if [[ -f $HOME/lastproj ]]; then
   lastproj=($(\cat $HOME/lastproj))
   export llproj=$lastproj
   export lePROJ=$HOME/proj/$lastproj
   export lePROJsrc=$HOME/proj/$lastprojsrc
fi

#PS1='\[\033[01;35m\]iPC\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]:\$ '
#https://www.kirsle.net/wizards/ps1.html
PS1="\[$(tput bold)\]\[$(tput setaf 1)\]\[$(tput setaf 3)\]le\[$(tput setaf 2)\]@\[$(tput setaf 6)\]\h \[$(tput setaf 5)\]\w\[$(tput setaf 1)\]\[$(tput setaf 7)\]\\$ \[$(tput sgr0)\]"

#if [ -f $HOME/.git-completion ]; then
#    source $HOME/.git-completion
#    GIT_PS1_SHOWDIRTYSTATE=true
#    PS1="\$(__git_ps1 '(%s) ')$PS1"
#fi


###
### misc feature
###

if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

function o()
{
    grepsel $@
}

function vg()
{
    if [[ $1 == "?" || $1 == "--help" || $1 == "-?" || $1 == "-h"  ]]; then
      echo "vg         ag viewer " 
      echo "   [regex] search for pattern via ag"
      echo "   [0..9]  for vim"
      
      return
    fi

    if [[ $1 == "--hist" ]]; then
      echo -e "show \033[96mag\033[0m pattern history"
      echo "-----------------------------------------"
      cat ~/ag_history
      return
    fi

    if [[ $1 == "" ]]; then
        grepsel -vv 0
	return
    fi

    re='^[0-9]+$'
    if [[ $1 =~ $re ]] ; then
	   echo "Number !!!!"
      	   grepsel -vv $1
	   return
    fi

    if [[ $1 == "-s" ]]; then
      grepsel -v
      return
    fi

    
    local DATE=`date +%Y%m%d-%H%M`  
    local STR=${DATE}" "$@" "     
#    echo $STR >> $HOME/ag_history
    echo -e "$STR\n$(cat $HOME/ag_history)" > $HOME/ag_history
    ag --fte $@ > ~/fte.grp
    grepsel -vv 0
}

function mkgrep()
{
    if [[ $1 == "" ]]; then
      echo "mkgrep pattern"
      return
    fi
    echo -e ">>>\033[92mmkgrep\033[93m\033[0m<<<"
    find . -name .repo -prune -o -name .git -prune -o -type f \( -name '*.mk' -o -name 'Makefile' -o -name '*.mak' \) -print0 | xargs -0 grep --color -n "$1"
    return 

}

function cgrep()
{
    if [[ $1 == "" ]]; then
      echo "cgrep pattern [mk]|[py]"
      return
    fi
    if [[ $2 == "mk" ]]; then
      echo -e ">>>\033[92mgrep all \033[93mmake\033[0m<<<"
      find . -name .repo -prune -o -name .git -prune -o -type f \( -name '*.mk' -o -name 'Makefile' -o -name '*.mak' \) -print0 | xargs -0 grep --color -n "$1"
      return 
    fi

    if [[ $2 == "py" ]]; then
      echo "grep all \033[091mpy\033[0m"
      find . -name .repo -prune -o -name .git -prune -o -type f \( -name '*.py' \) -print0 | xargs -0 grep --color -n "$1"
      return 
    fi

    if [[ $2 == "h" ]]; then
      echo "grep all \033[091mH\033[0m"
      find . -name .repo -prune -o -name .git -prune -o -type f \( -name '*.h' \) -print0 | xargs -0 grep --color -n "$1"
      return 
    fi

    if [[ $2 == "cc" ]]; then
      echo "grep all \033[091mc\033[0m"
      find . -name .repo -prune -o -name .git -prune -o -type f \( '*.c' -o -name '*.cc' -o -name '*.cpp' \) -print0 | xargs -0 grep --color -n "$1"
      return 
    fi

    if [[ $2 == "j" ]]; then
      echo "grep all \033[091mjava\033[0m"
      find . -name .repo -prune -o -name .git -prune -o -type f \( -name '*.java' \) -print0 | xargs -0 grep --color -n "$1"
      return 
    fi

    find . -name .repo -prune -o -name .git -prune -o -type f \( -name '*.mk' -o -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.h' \) -print0 | xargs -0 grep --color -n "$@"
}

#function gl_qcidiff_2013 
#{
#  repo forall -c git log --author="foo" --since="2013-01-01" --stat --summary
#}

#function gl_diff_2013 
#{
#  repo forall -c git log --since="2013-01-01" --stat --summary
#}


#function gl_status
#{
#  echo "repo forall -c 'echo $REPO_PROJECT; git status'"
#  repo forall -c "echo $REPO_PROJECT; git status"
#}

function ta ()
{
    #clean older info
    rm -rf tags
    rm -rf cscope.files
    rm -rf cscope.out
    # generate new info
    find $PWD | egrep -i "\.(c|h|cpp)$" > cscope.files
    ctags -R . *.c *.h *.cpp --tag-relative=yes ./
}




function ncd () {
    if [[ -z "$1" ]]; then
        echo "Usage: ncd <regex>"
        return
    fi
    
    T=${PHOME}
    # reluanch Project HOME for TOP Project Directory
    if [[ $T == "" ]]; then
        local xhome
        xhome=`sed -n 1p $lePROJ|awk -F " " '{print $3}'`
        echo $xhome
        export PHOME=$xhome
        T=${PHOME}
    fi
    
    if [[ ! -f $T/filelist ]]; then
        echo -n "Creating index..."
        (cd $T; find . -wholename ./out -prune -o -wholename ./.repo -prune -o -wholename ./obj -prune -o -type f > filelist)
        echo " Done"
        echo ""
    fi
    local lines
    lines=($(\grep "$1" $T/filelist | sed -e 's/\/[^/]*$//' | sort | uniq))
    if [[ ${#lines[@]} = 0 ]]; then
        echo "Not found"
        return
    fi
    local pathname
    local choice
    if [[ ${#lines[@]} > 1 ]]; then
        while [[ -z "$pathname" ]]; do
            local index=1
            local line
            for line in ${lines[@]}; do
                printf "%6s %s\n" "[$index]" $line
                index=$(($index + 1))
            done
            echo
            echo -n "Select one: "
            unset choice
            read -e choice
            if [[ $choice -eq "" ]]; then
              echo "Oops!!!"
              return
            fi
            if [[ $choice -gt ${#lines[@]} || $choice -lt 1 ]]; then
                echo "Invalid choice"
                continue
            fi
            pathname=${lines[$(($choice-1))]}
        done
    else
        pathname=${lines[0]}
    fi
    cd $T/$pathname
}





###
###
###  SwitchProj script
###
###

function sp()
{

    if [[ $1 == "?" || $1 == "--help" ]]; then
      echo -e "  sp v0.1 for \033[092mSwitchProj\033[0m in bash"
      echo -e "  sp             -- project lists \033[91m*\033[0m"
      echo -e "  sp [\033[92m0..9\033[0m]      -- switch project to []"
      echo -e "  sp -anp foo    -- create new Project"
      echo ""
      echo -e "  \033[91md/h\033[0m are available when proj is create \033[93mh ?\033[0m for more info"
      echo ""
      return
    fi


    if [[ "$1" == "-anp" ]]; then
        if [[ $2 == "" ]]; then
           echo "project name needed!!!"
           echo "sp -anp foo"
           return
        fi
        if [ -f $HOME/$2 ];then
           echo "Already exist"
        else
           src="src"
           projsrc=$2$src
           touch $HOME/proj/$2
           touch $HOME/proj/$projsrc
           echo $2 >> $G_leproj
           echo -e "Project \033[95m$2\033[0m Create"
           export lePROJ=$HOME/proj/$2
           export lePROJsrc=$HOME/proj/$projsrc           
           echo -e "Set \033[93m$PWD\033[0m as home"
#           echo -ne "Set \033[93m$PWD\033[0m as home proj (Y/n): "
#           read a
#           if [[ $a == "Y" || $a == "y" || $a = "" ]]; then
#           read -p "keyboard: " kw
           kw="-"
           local DATE=`date +%Y%m%d-%H%M`
           local DIR=`pwd`           
           local STR=${DATE}">> "$kw" "${PWD}
           kw="${kw:--}"
           echo $STR >> $HOME/proj/$2
#           fi
           
        fi
        return
    fi

    if [[ "$1" == "-rm" ]]; then
	lines=($(\cat $G_leproj | uniq))
	local index=0
	for line in ${lines[@]}; do
	    printf "\033[92m%6s \033[0m%s \033[0m\n" "[$index]" $line 
	    index=$(($index+1))
	done 
	
	read -p "Which proj need to remove? " removed
        if [[ -z $removed ]] || (( $removed >= ${#lines[@]} )); then
	    return 1
        fi
        rm -f "$G_leproj"
        touch "$G_leproj"

#	file=${lines[$removed]}
#        rm -f ~/proj/$file
#        rm -f ~/proj/$filesrc	

        for (( i=0; i<${#lines[@]}; i++)); do
          if [[ $i != $removed ]] && [[ ${key[$i]} != $removed ]]; then
            echo "${lines[$i]}" >> "$G_leproj"
          fi
        done
 
 	return
    fi

    if [[ "$1" == "" ]]; then  
	aproj=($(\echo $lePROJ | awk -F"/" '{print $NF}'))
        echo -e "\033[92mProject LiST\033[0m"
        echo "----+------------------------"
	lines=($(\cat $G_leproj | uniq))
	local index=1
	for line in ${lines[@]}; do
	          if [[ "$line" == "$aproj" ]]; then
		      printf " \033[091m*\033[92m%6s \033[0m%s \033[0m\n" "[$index]" $line 
		  else
		      printf "  \033[92m%6s \033[0m%s \033[0m\n" "[$index]" $line 
		  fi
		  index=$(($index+1))
	      done 
        echo -n "Select Project: "
        unset choice
        read -e choice
        if [[ $choice -eq "0" ]]; then
           return
        fi
        proj=${lines[$choice-1]}
        src="src"
        projsrc=$proj$src
        export lePROJ=$HOME/proj/$proj
        export lePROJsrc=$HOME/proj/$projsrc
        echo -ne "\033]0;$lePROJ\007"
        echo $proj > $HOME/lastproj

        xhome=`sed -n 1p $lePROJ|awk -F " " '{print $3}'`
        export PHOME=$xhome
    else
       if [[ ${#lines[@]} = 0 ]]; then
           echo "no Proj"
           return
        fi
        ln=$1-1
        proj=${lines[${ln}]}
#        proj=$(echo $xx | awk '{split($0,a,":"); print a[2]}')
        src="src"
        projsrc=$proj$src
        export lePROJ=$HOME/proj/$proj
        export lePROJsrc=$HOME/proj/$projsrc
        echo -ne "\033]0;$lePROJ\007"
        echo $proj > $HOME/lastproj

        # pop first line of $lePROJ as home
        xhome=`sed -n 1p $lePROJ|awk -F " " '{print $3}'`
        export PHOME=$xhome
    fi
}


function go_ledir
{
    local lines
#    lines=($(\grep "$1" /work/ledir | sed -e 's/\/[^/]*$//' | sort | uniq))
#    if (( $1 > 0 )) 2>/dev/null; then
#       local skip_sel=1
#       lines=($(\grep "" $ledir | sed -e 's/[^ ]* //'| sort | uniq))    
#    else
#       lines=($(\grep "$1" $ledir | sed -e 's/[^ ]* //'| sort | uniq))
#    fi
#    if [[ ${#lines[@]} = 0 ]]; then
#        echo "Not found"
#        return
#    fi
    lines=($(cat $ledir| awk -F " " '{print $3}'))
    lineComment=($(cat $ledir| awk -F " " '{print $2}'))
    local pathname
    local choice
    if [[ ${#lines[@]} > 1 ]]; then
        while [[ -z "$pathname" ]]; do
            local index=1
            local line
            for line in ${lines[@]}; do
                if [[ $skip_sel -ne "1" ]]; then
                  printf "\033[92m%6s \033[0m%s \033[93m%s\033[0m\n" "[$index]" $line [${lineComment[($index -1)]}] 
                fi
                index=$(($index + 1))
            done
            if [[ $skip_sel -eq "1" ]]; then
              choice=$1
            else
              echo
              echo -n "Select one: "
              unset choice
              read -e choice
              if [[ $choice -eq "0" ]]; then
                return
              fi
            fi
#            echo ${lineComment[$(($choice-1))]}
            if [[ $choice -gt ${#lines[@]} || $choice -lt 1 ]]; then
                echo "Invalid choice"
                continue
            fi
            pathname=${lines[$(($choice-1))]}
        done
    else
        pathname=${lines[0]}
    fi
#    echo $pathname
    cd $pathname
}



#
# special for project base on d
#

function h()
{
     local ledir=$lePROJ
     local lefiles=$lePROJ"src"
     echo -e "Project select via \033[44m>>> \033[91msp\033[93m * $llproj\033[0m\033[44m <<<\033[0m"
     d $1 $2 $@
}


#
# d for generic directory store
#
function d
{

   if [[ "$1" == "l" ]]; then
      echo -e "\033[07mShow favor $ledir \033[0m"
      grepsel -ch $ledir
#      cat $ledir
#      go_ledir
      return
   fi
   
   if [[ "$1" == "?" ]]; then
      echo ""
      echo -e " \033[95m$FUNCNAME/h\033[0m v0.1 for direcoty store and show (\033[94m$ledir\033[0m)"
      echo "------------------------------------"
      echo -e " 0       -- show src list"
      echo -e " c       -- clean $ledir"
      echo -e " -       -- delete last dir in $ledir"
      echo -e " s|set   -- store current directory in $ledir"
      echo -e " ed|edit -- edit bookmark manually"
      echo -e " cs      -- export CSCOPE_DB"
      echo -e " l       -- list $ledir history"
      echo    " f foo   -- store foo files in $lefiles"
      return
   fi
   
   if [[ "$1" == "ed" || "$1" == "edit" ]]; then
        echo -e "bookmark via \033[92m$ledir\033[0m"
	vi "$ledir"
        return	
   fi

   if [[ "$1" == "c" ]]; then
      cat /dev/null > $ledir
      echo -e "clean \033[94m$ledir\033[0m)"
      return
   fi   

   if [[ "$1" == "0" ]]; then
      echo -e "\033[92mShow favor leSRC \033[0m"
      cat $lefiles
      return
   fi   
   
   #### test argument is integer
   if (( $1 > 0 )) 2>/dev/null; then
     go_ledir $1
     return 
   fi

   if [[ "$1" == "-" ]]; then
      sed -i '$ d' $ledir
      echo -e "remove last \033[94m$ledir\033[0m)"
      return
   fi   

   if [[ "$1" == "v" ]]; then
      vgrep -v
      return
   fi   

   if [[ "$1" == "f" ]]; then
      local DATE=`date +%Y%m%d-%H%M`
      local DIR=`pwd`
      local STR=${DATE}">> "${DIR}/$2
      echo $STR >> $lefiles
      return
   fi   

   if [[ "$1" == "set" || "$1" == "s" ]]; then
     local DATE=`date +%Y%m%d-%H%M`
     local DIR=`pwd`
     read -e -p "keyboard: " kw
     local STR=${DATE}">> "$kw" "${DIR}
     kw="${kw:--}"
     echo $STR >> $ledir
     echo -e "DIR \033[96m${DIR}\033[0m Stored \033[91m@${DATE}\033[0m !!!!"
     return
   fi        


   if [[ "$1" == "cs" ]]; then
#      export CSCOPE_DB=`pwd`/cscope.out
      export CSCOPE_DB=`pwd`/
      echo "CSCOPE_DB export as $CSCOPE_DB"
      return 
   fi

   if [[ "$1" == "tags" ]]; then
      export TAGFILE=`pwd`/tags
      echo -e "\033[91mTAGFILE\033[0m export as $TAGFILE"
      echo $TAGFILE > ~/.tags
      return 
   fi




   echo -e "\033[92mShow favor \033[0m$ledir "
   go_ledir $1
}


# color
# http://misc.flogisoft.com/bash/tip_colors_and_formatting
